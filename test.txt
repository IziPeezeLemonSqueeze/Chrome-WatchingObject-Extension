-- ERRORE
System.debug('@STRid');
List<Account> acc = [SELECT Id FROM Account WHERE Id =: '@IDidacc' and '@BOLactive'];
System.debug('@BOLactive');

-- BUONO
System.debug('@STRid');
System.debug('@NMBeta');
System.debug('@BOLisactive');
List<Account> accList = [SELECT Id FROM Account LIMIT '@NMBlimit'];
System.debug(accList);
// Id batchJobId = Databse.executeBatch(new Batch(), '@NMBbatch');
String ids = '@Vid1, @Vid2';
String ids_v2 = '@Vid3';

System.debug('@STRid');
System.debug('@NMBeta');
System.debug('@Vnome');
System.debug('@BOLactive');

String whereClause = 'WHERE Id in (@Vidaccount)';
List<Account> accList = Database.query('SELECT Id FROM Account ' + whereClause):


/* 001IY000002ZlKqYAK */   
/*(Account:{Id=001IY000002ZlKtYAK}, Account:{Id=001IY000002ZlKqYAK}) */
List<Account> accList = [SELECT Id FROM Account LIMIT '@NMBlimit'];
System.debug(accList);

/* TEST V - SBAGLIATO  */
String queryStrg = 'SELECT Id FROM Account WHERE Id = @Vidaccount';
List<Account> accList = Database.query(queryStrg);

/* INTRODUZIONE ALLA VARIABILE @ID - GIUSTO  */
Id queryID = '@IDidaccount';
String queryStrg = 'SELECT Id FROM Account WHERE id =: queryID';
List<Account> accList = Database.query(queryStrg);
System.debug(accList);

/* USO CORRETTO DI V */
String ids = '@Vid1, @Vid2';
System.debug(ids);


#___________________________________________________#

Fixare il menu contestuale


PRESENTAZIONE
CODE SNIPPET,
Serve per aiutare nel quotidiano lancio di script.
Velocizzare e migliorare,
con un interfaccia grafica Ã¨ piÃ¹ veloce distinguere quale
Ã¨ lo script che dovrai lanciare.

Quante volte, capita di dover copiare e incollare script salvati sul notepad, o commentare intere
sezioni di codice e scommentarne altre da far funzionare?
Senza contare le innumerevoli volte in cui dobbiamo anche modificarlo per farlo funzionare!

Con CODE SNIPPET tutto questo sarÃ  piÃ¹ veloce comodo ed elegante, lasciando QUESTO spazio LIBERO 
da paginate di script commentato... o magari neanche piÃ¹ in uso!

------------------------------------------------

STEP 1.

Come creare snippet, o meglio frammenti di codice riutilizzabile a piacimento e facilmente editabili?

Per salvare uno snippet il modo migliore Ã¨ prima scriverlo! poi testarlo, e se Ã¨ utile conservarlo.
Per prima cosa ti serve del codice, basta anche un semplice System.debug('Ciao Mondo!'). Bene ora creiamo lo snippet, fai:
seleziona tutto il codice interessato.
click destro sul codice selezionato.
e seleziona la voce: 'Salva selezione come CodeSnippet'.
    
Ora dovrebbe aprirsi un prompt che ti chiede il nome con cui salvare questo snippet.

noi lo chiameremo 'Hello CS'.
Eccolo che appare nella finestra di CODE SNIPPET!

------------------------------------------------

STEP 2 LANCIARE UNO SNIPPET.
Ora che abbiamo creato uno snippet, Ã¨ giunto il momento di lanciarlo!

Clicca il pulsate [Code Snippet]  in basso a sinistra su questa finestra!
    
Qui dovresti vedere il tuo snippet appena creato: Hello CS
con i relativi pulsanti [RUN ðŸš€][DISCHETTOðŸ’¾][GABINETTOðŸš½]
    
[RUN ðŸš€] Serve per eseguire lo snippet come se avessi selezionato tu il codice in questa schermata e premuto Execute Highlighted.
.

[DISCHETTOðŸ’¾]	 Serve per mettere nella clipboard lo snippet completo (Ã¨ come fare ctrl+c).
.

[GABINETTOðŸš½]	 Serve beh... per, te lo lascio immaginare ...cancellare lo snippet
    
    
pi esse, noterai che il run sarÃ  di colore verde, esiste anche la versione arancione, ma di questo ne
      parleremo piÃ¹ avanti!


------------------------------------------------
AUDIO OK:
STEP 3 RUN AVANZATO.


Ti ricordi quando ti ho detto che esiste una versione avanzata del run che ti consente di modificare lo snippet runtime?
Ah no...? non l'ho fatto...?
    
Va beh, allora sicuramente hai sentito parlare del run arancione, ecco... il run arancione... Ã¨ cosÃ¬ quando uno
snippet, ha la capacitÃ  di interrogarti sul valore di alcune VARIABILI, in modo che tu non debba
ricordarti di modificare lo snippet prima di lanciarlo e come lanciarlo.
    
Su come creare questi tipi di snippet e le VARIABILI lo vediamo lo step dopo.
Ora capiamoli!
Crea come hai fatto prima uno snippet da questo codice:
System.debug('Ciao mi chiamo @Vnome e ho @Vanni anni');
Dagli il nome che preferisci e salvalo!
Come hai notato ci sono delle cose che non tornano, che razza di nome di variabile dovrebbe essere @Vnome? e @Vanni?
Ecco il superpotere di CodeSnippet! Ora proviamolo!

------------------------------------------------

STEP 4, RUN ARANCIONE.
Lo so ti avevo promesso di spiegarti le variabili...
    
Ma prima eseguiamo questo run arancione e vediamo come si comporta!
    
Hai visto? Si Ã¨ aperta una finestra dove ti chiede di inserire il valore delle due variabili definite nello snippet!

Uno chiedeva il nome e l'altro l'etÃ !


Guardiamo il log!
    
Ok ora Ã¨ il momento di farli noi sti super snippet!


------------------------------------------------


STEP 5, VARIABILI.

Tipi di Variabili: 
    Per la variabile di tipo Numero:
	keyword: @ N M B, tutto maiuscolo, si usa per i tipi: int, float, double ecc...

    Per la variabile di tipo Boolean:
    keyword: @ B O L, tutto maiuscolo, si usa per i tipi: true o fols.

    Per la variabile di tipo String:
    keyword: @ S T R, tutto maiuscolo, si usa per il testo o per ID!
    
    Per la variabile di tipo V:
    keyword: @ Vi, tutto maiuscolo, si usa per qualunque cosa, puÃ² essere qualsiasi cosa, puÃ² stare ovunque.

    Per la variabile di tipo ID:
    keyword: @ I Di, tutto maiuscolo, si usa per avere la conferma di inserire un id nel campo di testo.

STEP 6, VARIABILI.
Composizione Variabile:
Le variabili sono composte da: apice, @, tipo, nome della variabile, apice.
Dentro gli apici e dopo la chiocciola mettiamo il tipo.
Il nome della variabile, va inserito TUTTO MINUSCOLO! tutto attaccato e senza simboli come: punto, meno, underscore, piu  ecc...
Si possono concatenare due o piÃ¹ variabili.

La variabile @ Vi, si usa in modi particolari, tipo quando ce da sostituire una concatenazione di stringhe.
Vediamo alcuni esempi!